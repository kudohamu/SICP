//再帰
(define (f n)
  (if (< n 3)
    n
    (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))
  )
)


//反復
(define (f n)
  (define (f-iter x1 x2 x3 count)
    (cond
      ((= count 0) x3)
      ((= count 1) x2)
      (else (f-iter (+ x1 (* 2 x2) (* 3 x3)) x1 x2 (- count 1)))
    )
  )
  (f-iter 2 1 0 n)
)
